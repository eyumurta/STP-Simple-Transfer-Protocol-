
Simple Transfer Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800329c  0800329c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080032b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080032b8  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000999f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019da  00000000  00000000  000299db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001572c  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d0d  00000000  00000000  0004195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000850a1  00000000  00000000  0004b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d070a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d90  00000000  00000000  000d075c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800306c 	.word	0x0800306c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800306c 	.word	0x0800306c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MODBUS_CRC16_v3>:
 *      Author: Muhammed
 */

#include "STP.h"

uint16_t MODBUS_CRC16_v3(uint8_t *buf, uint8_t len) {
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
			0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01,
			0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540, 0x8701,
			0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341, 0x4100,
			0x81C1, 0x8081, 0x4040 };

	uint8_t xor = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	737b      	strb	r3, [r7, #13]
	uint16_t crc = 0xFFFF;
 80004ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f0:	81fb      	strh	r3, [r7, #14]

	while (len--) {
 80004f2:	e011      	b.n	8000518 <MODBUS_CRC16_v3+0x3c>
		xor = (*buf++) ^ crc;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	89fb      	ldrh	r3, [r7, #14]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4053      	eors	r3, r2
 8000502:	737b      	strb	r3, [r7, #13]
		crc >>= 8;
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	0a1b      	lsrs	r3, r3, #8
 8000508:	81fb      	strh	r3, [r7, #14]
		crc ^= table[xor];
 800050a:	7b7b      	ldrb	r3, [r7, #13]
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <MODBUS_CRC16_v3+0x54>)
 800050e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000512:	89fb      	ldrh	r3, [r7, #14]
 8000514:	4053      	eors	r3, r2
 8000516:	81fb      	strh	r3, [r7, #14]
	while (len--) {
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	70fa      	strb	r2, [r7, #3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1e8      	bne.n	80004f4 <MODBUS_CRC16_v3+0x18>
	}

	return crc;
 8000522:	89fb      	ldrh	r3, [r7, #14]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	08003084 	.word	0x08003084

08000534 <Master_Frame_Packer_Read_Req>:
#include "STP.h"


//Packing the sent frame.The read reguest the slave device
void Master_Frame_Packer_Read_Req(STP_MASTER_Typedef *STP, uint8_t Register_Group,
		uint8_t Slave_Adress) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b08c      	sub	sp, #48	; 0x30
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
 8000540:	4613      	mov	r3, r2
 8000542:	70bb      	strb	r3, [r7, #2]

	uint16_t CRC;
	int8_t data[MAX_DATA_LENGHT];

	STP->Slave_Adress = Slave_Adress;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	78ba      	ldrb	r2, [r7, #2]
 8000548:	701a      	strb	r2, [r3, #0]
	STP->Register_Group = Register_Group;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	705a      	strb	r2, [r3, #1]
	STP->Sender_Frame[0] = STP->Slave_Adress;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	STP->Sender_Frame[1] = STP->Register_Group;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	785a      	ldrb	r2, [r3, #1]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	STP->Startin_Adress_of_Register = 0;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	709a      	strb	r2, [r3, #2]
	STP->Number_of_Register = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	70da      	strb	r2, [r3, #3]
	STP->Sender_Frame[2] = STP->Startin_Adress_of_Register;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	789a      	ldrb	r2, [r3, #2]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	STP->Sender_Frame[3] = STP->Number_of_Register;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	78da      	ldrb	r2, [r3, #3]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	STP->Request = READ_REQUEST;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2202      	movs	r2, #2
 8000588:	711a      	strb	r2, [r3, #4]
	STP->Error_Information = 0x00;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	715a      	strb	r2, [r3, #5]
	STP->Sender_Frame[4] = STP->Request;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	STP->Sender_Frame[5] = STP->Error_Information;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795a      	ldrb	r2, [r3, #5]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	//Memory_Copybu alanı sıfrla doldurmak gerekbilir.
	memcpy(STP->Data, data, MAX_DATA_LENGHT);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3306      	adds	r3, #6
 80005a8:	461d      	mov	r5, r3
 80005aa:	f107 040c 	add.w	r4, r7, #12
 80005ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b0:	6028      	str	r0, [r5, #0]
 80005b2:	6069      	str	r1, [r5, #4]
 80005b4:	60aa      	str	r2, [r5, #8]
 80005b6:	60eb      	str	r3, [r5, #12]
 80005b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ba:	6128      	str	r0, [r5, #16]
 80005bc:	6169      	str	r1, [r5, #20]
 80005be:	61aa      	str	r2, [r5, #24]
 80005c0:	61eb      	str	r3, [r5, #28]
	memcpy(&(STP->Sender_Frame[6]), STP->Data, MAX_DATA_LENGHT);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3306      	adds	r3, #6
 80005cc:	2220      	movs	r2, #32
 80005ce:	4619      	mov	r1, r3
 80005d0:	f002 fd36 	bl	8003040 <memcpy>

	//Crc en son hesaplanır.
	CRC = MODBUS_CRC16_v3(STP->Sender_Frame, MAX_DATA_LENGHT + 5);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3328      	adds	r3, #40	; 0x28
 80005d8:	2125      	movs	r1, #37	; 0x25
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff7e 	bl	80004dc <MODBUS_CRC16_v3>
 80005e0:	4603      	mov	r3, r0
 80005e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	STP->Sender_Frame[38] = CRC >> 8; //High Byte
 80005e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	STP->Sender_Frame[39] = CRC & 0x00FF; //Low byte
 80005f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

}
 80005fc:	bf00      	nop
 80005fe:	3730      	adds	r7, #48	; 0x30
 8000600:	46bd      	mov	sp, r7
 8000602:	bdb0      	pop	{r4, r5, r7, pc}

08000604 <Master_Frame_Depacker>:

}

//Master gelen cevabı ayrıştırır.
//De packing the receiving frame
void Master_Frame_Depacker(STP_MASTER_Typedef *STP,uint8_t rawdata[]) {
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	b097      	sub	sp, #92	; 0x5c
 8000608:	af10      	add	r7, sp, #64	; 0x40
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]

	uint16_t CRC;
	memcpy(STP->Response_From_Slave.Receiving_Frame, rawdata, MAX_DATA_LENGHT + 8);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3378      	adds	r3, #120	; 0x78
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fd12 	bl	8003040 <memcpy>

	STP->Response_From_Slave.Slave_Adress =STP->Response_From_Slave.Receiving_Frame[0];
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	STP->Response_From_Slave.Register_Group =STP->Response_From_Slave.Receiving_Frame[1];
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	STP->Response_From_Slave.Startin_Adress_of_Register =STP->Response_From_Slave.Receiving_Frame[2];
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	STP->Response_From_Slave.Number_of_Register =STP->Response_From_Slave.Receiving_Frame[3];
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	STP->Response_From_Slave.Request = STP->Response_From_Slave.Receiving_Frame[4];
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	STP->Response_From_Slave.Error_Information =STP->Response_From_Slave.Receiving_Frame[5];
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	memcpy((STP->Response_From_Slave.Data),
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f103 0056 	add.w	r0, r3, #86	; 0x56
			&(STP->Response_From_Slave.Receiving_Frame[6]),
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	337e      	adds	r3, #126	; 0x7e
	memcpy((STP->Response_From_Slave.Data),
 800066e:	2220      	movs	r2, #32
 8000670:	4619      	mov	r1, r3
 8000672:	f002 fce5 	bl	8003040 <memcpy>
			 MAX_DATA_LENGHT);

	CRC = MODBUS_CRC16_v3((STP->Response_From_Slave.Receiving_Frame), MAX_DATA_LENGHT + 5);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3378      	adds	r3, #120	; 0x78
 800067a:	2125      	movs	r1, #37	; 0x25
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff2d 	bl	80004dc <MODBUS_CRC16_v3>
 8000682:	4603      	mov	r3, r0
 8000684:	82fb      	strh	r3, [r7, #22]
	STP->Response_From_Slave.CRC_High = CRC >> 8;
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2da      	uxtb	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	STP->Response_From_Slave.CRC_Low = CRC & 0x00ff;
 8000694:	8afb      	ldrh	r3, [r7, #22]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	if (STP->Response_From_Slave.CRC_High
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
			== rawdata[MAX_DATA_LENGHT + 5 + 1]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	3326      	adds	r3, #38	; 0x26
 80006a8:	781b      	ldrb	r3, [r3, #0]
	if (STP->Response_From_Slave.CRC_High
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d16b      	bne.n	8000786 <Master_Frame_Depacker+0x182>
					   && STP->Response_From_Slave.CRC_Low
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
					   == rawdata[MAX_DATA_LENGHT + 5 + 2]) {
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	3327      	adds	r3, #39	; 0x27
 80006b8:	781b      	ldrb	r3, [r3, #0]
					   && STP->Response_From_Slave.CRC_Low
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d163      	bne.n	8000786 <Master_Frame_Depacker+0x182>

		//gelen cevap istek yapılan cihazdan mı gelmiş?
		if(STP->Response_From_Slave.Slave_Adress == STP->Slave_Adress){
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d13e      	bne.n	800074a <Master_Frame_Depacker+0x146>

			switch (STP->Request) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d022      	beq.n	800071a <Master_Frame_Depacker+0x116>
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d154      	bne.n	8000782 <Master_Frame_Depacker+0x17e>
				case READ_REQUEST:

					Master_Register_Write((int8_t *)STP->Response_From_Slave.Data,STP->Register_Group);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f103 0256 	add.w	r2, r3, #86	; 0x56
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4610      	mov	r0, r2
 80006e6:	f000 f883 	bl	80007f0 <Master_Register_Write>
					STP->Data_Callback(STP->Response_From_Slave);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	68fe      	ldr	r6, [r7, #12]
 80006f4:	466d      	mov	r5, sp
 80006f6:	f106 0460 	add.w	r4, r6, #96	; 0x60
 80006fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800070a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800070e:	f106 0350 	add.w	r3, r6, #80	; 0x50
 8000712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000714:	687c      	ldr	r4, [r7, #4]
 8000716:	47a0      	blx	r4

					break;
 8000718:	e034      	b.n	8000784 <Master_Frame_Depacker+0x180>

				case WRITE_REQUEST:
					STP->Data_Callback(STP->Response_From_Slave);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	68fe      	ldr	r6, [r7, #12]
 8000724:	466d      	mov	r5, sp
 8000726:	f106 0460 	add.w	r4, r6, #96	; 0x60
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800073a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800073e:	f106 0350 	add.w	r3, r6, #80	; 0x50
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	687c      	ldr	r4, [r7, #4]
 8000746:	47a0      	blx	r4
					break;
 8000748:	e01c      	b.n	8000784 <Master_Frame_Depacker+0x180>



		}
		else{
			STP->Response_From_Slave.Error_Information = ANOTHER_DEVICE_RESPONSE;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2205      	movs	r2, #5
 800074e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			STP->Error_Callback(STP->Response_From_Slave);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	68fe      	ldr	r6, [r7, #12]
 800075c:	466d      	mov	r5, sp
 800075e:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8000762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000772:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000776:	f106 0350 	add.w	r3, r6, #80	; 0x50
 800077a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077c:	687c      	ldr	r4, [r7, #4]
 800077e:	47a0      	blx	r4
		if(STP->Response_From_Slave.Slave_Adress == STP->Slave_Adress){
 8000780:	e01d      	b.n	80007be <Master_Frame_Depacker+0x1ba>
					break;
 8000782:	bf00      	nop
		if(STP->Response_From_Slave.Slave_Adress == STP->Slave_Adress){
 8000784:	e01b      	b.n	80007be <Master_Frame_Depacker+0x1ba>



	} else {
		//CRC_Error
		STP->Response_From_Slave.Error_Information = READ_CRC_ERROR;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2202      	movs	r2, #2
 800078a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		STP->Error_Callback(STP->Response_From_Slave);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	68fe      	ldr	r6, [r7, #12]
 8000798:	466d      	mov	r5, sp
 800079a:	f106 0460 	add.w	r4, r6, #96	; 0x60
 800079e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007b2:	f106 0350 	add.w	r3, r6, #80	; 0x50
 80007b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b8:	687c      	ldr	r4, [r7, #4]
 80007ba:	47a0      	blx	r4

	}

}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007c6 <Init_STP_Master>:

void Init_STP_Master(STP_MASTER_Typedef *STP,void (*Data_Callback)(STP_RESPONS_FROM_SLAVE_Typedef STP),void (*Error_Callback)(STP_RESPONS_FROM_SLAVE_Typedef STP)){
 80007c6:	b480      	push	{r7}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]

	STP->Data_Callback = Data_Callback;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	STP->Error_Callback = Error_Callback;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <Master_Register_Write>:
void Master_Register_Write(int8_t Reg_Data[],uint8_t Register_Group){
 80007f0:	b4b0      	push	{r4, r5, r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]

	switch (Register_Group) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	3b01      	subs	r3, #1
 8000800:	2b07      	cmp	r3, #7
 8000802:	f200 8092 	bhi.w	800092a <Master_Register_Write+0x13a>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <Master_Register_Write+0x1c>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	0800082d 	.word	0x0800082d
 8000810:	0800084b 	.word	0x0800084b
 8000814:	0800086b 	.word	0x0800086b
 8000818:	0800088b 	.word	0x0800088b
 800081c:	080008ab 	.word	0x080008ab
 8000820:	080008cb 	.word	0x080008cb
 8000824:	080008eb 	.word	0x080008eb
 8000828:	0800090b 	.word	0x0800090b
					case REGISTER_GROUP_1:
						memcpy(Master_Register.Register_Group_1,
 800082c:	4a42      	ldr	r2, [pc, #264]	; (8000938 <Master_Register_Write+0x148>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4614      	mov	r4, r2
 8000832:	461d      	mov	r5, r3
 8000834:	6828      	ldr	r0, [r5, #0]
 8000836:	6869      	ldr	r1, [r5, #4]
 8000838:	68aa      	ldr	r2, [r5, #8]
 800083a:	68eb      	ldr	r3, [r5, #12]
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	6928      	ldr	r0, [r5, #16]
 8000840:	6969      	ldr	r1, [r5, #20]
 8000842:	69aa      	ldr	r2, [r5, #24]
 8000844:	69eb      	ldr	r3, [r5, #28]
 8000846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
								Reg_Data, MAX_DATA_LENGHT);
						break;
 8000848:	e070      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_2:
						memcpy(Master_Register.Register_Group_2,
 800084a:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <Master_Register_Write+0x148>)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	f103 0420 	add.w	r4, r3, #32
 8000852:	4615      	mov	r5, r2
 8000854:	6828      	ldr	r0, [r5, #0]
 8000856:	6869      	ldr	r1, [r5, #4]
 8000858:	68aa      	ldr	r2, [r5, #8]
 800085a:	68eb      	ldr	r3, [r5, #12]
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	6928      	ldr	r0, [r5, #16]
 8000860:	6969      	ldr	r1, [r5, #20]
 8000862:	69aa      	ldr	r2, [r5, #24]
 8000864:	69eb      	ldr	r3, [r5, #28]
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 8000868:	e060      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_3:
						memcpy(Master_Register.Register_Group_3,
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <Master_Register_Write+0x148>)
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000872:	4615      	mov	r5, r2
 8000874:	6828      	ldr	r0, [r5, #0]
 8000876:	6869      	ldr	r1, [r5, #4]
 8000878:	68aa      	ldr	r2, [r5, #8]
 800087a:	68eb      	ldr	r3, [r5, #12]
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	6928      	ldr	r0, [r5, #16]
 8000880:	6969      	ldr	r1, [r5, #20]
 8000882:	69aa      	ldr	r2, [r5, #24]
 8000884:	69eb      	ldr	r3, [r5, #28]
 8000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 8000888:	e050      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_4:
						memcpy(Master_Register.Register_Group_4,
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <Master_Register_Write+0x148>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000892:	4615      	mov	r5, r2
 8000894:	6828      	ldr	r0, [r5, #0]
 8000896:	6869      	ldr	r1, [r5, #4]
 8000898:	68aa      	ldr	r2, [r5, #8]
 800089a:	68eb      	ldr	r3, [r5, #12]
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	6928      	ldr	r0, [r5, #16]
 80008a0:	6969      	ldr	r1, [r5, #20]
 80008a2:	69aa      	ldr	r2, [r5, #24]
 80008a4:	69eb      	ldr	r3, [r5, #28]
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 80008a8:	e040      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_5:
						memcpy(Master_Register.Register_Group_5,
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <Master_Register_Write+0x148>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80008b2:	4615      	mov	r5, r2
 80008b4:	6828      	ldr	r0, [r5, #0]
 80008b6:	6869      	ldr	r1, [r5, #4]
 80008b8:	68aa      	ldr	r2, [r5, #8]
 80008ba:	68eb      	ldr	r3, [r5, #12]
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	6928      	ldr	r0, [r5, #16]
 80008c0:	6969      	ldr	r1, [r5, #20]
 80008c2:	69aa      	ldr	r2, [r5, #24]
 80008c4:	69eb      	ldr	r3, [r5, #28]
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 80008c8:	e030      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_6:
						memcpy(Master_Register.Register_Group_6,
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <Master_Register_Write+0x148>)
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80008d2:	4615      	mov	r5, r2
 80008d4:	6828      	ldr	r0, [r5, #0]
 80008d6:	6869      	ldr	r1, [r5, #4]
 80008d8:	68aa      	ldr	r2, [r5, #8]
 80008da:	68eb      	ldr	r3, [r5, #12]
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	6928      	ldr	r0, [r5, #16]
 80008e0:	6969      	ldr	r1, [r5, #20]
 80008e2:	69aa      	ldr	r2, [r5, #24]
 80008e4:	69eb      	ldr	r3, [r5, #28]
 80008e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 80008e8:	e020      	b.n	800092c <Master_Register_Write+0x13c>

					case REGISTER_GROUP_7:
						memcpy(Master_Register.Register_Group_7,
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <Master_Register_Write+0x148>)
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 80008f2:	4615      	mov	r5, r2
 80008f4:	6828      	ldr	r0, [r5, #0]
 80008f6:	6869      	ldr	r1, [r5, #4]
 80008f8:	68aa      	ldr	r2, [r5, #8]
 80008fa:	68eb      	ldr	r3, [r5, #12]
 80008fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fe:	6928      	ldr	r0, [r5, #16]
 8000900:	6969      	ldr	r1, [r5, #20]
 8000902:	69aa      	ldr	r2, [r5, #24]
 8000904:	69eb      	ldr	r3, [r5, #28]
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 8000908:	e010      	b.n	800092c <Master_Register_Write+0x13c>
					case REGISTER_GROUP_8:
						memcpy(Master_Register.Register_Group_8,
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <Master_Register_Write+0x148>)
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8000912:	4615      	mov	r5, r2
 8000914:	6828      	ldr	r0, [r5, #0]
 8000916:	6869      	ldr	r1, [r5, #4]
 8000918:	68aa      	ldr	r2, [r5, #8]
 800091a:	68eb      	ldr	r3, [r5, #12]
 800091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091e:	6928      	ldr	r0, [r5, #16]
 8000920:	6969      	ldr	r1, [r5, #20]
 8000922:	69aa      	ldr	r2, [r5, #24]
 8000924:	69eb      	ldr	r3, [r5, #28]
 8000926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
														Reg_Data, MAX_DATA_LENGHT);
						break;
 8000928:	e000      	b.n	800092c <Master_Register_Write+0x13c>
					default:
						break;
 800092a:	bf00      	nop
					}
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bcb0      	pop	{r4, r5, r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000028 	.word	0x20000028

0800093c <datacallback_Master>:
uint8_t Receive_Completed = 0;
uint8_t Response_Ready = 0;
uint8_t transmit_buffer[MAX_DATA_LENGHT+8];
uint8_t receive_buffer[MAX_DATA_LENGHT+8];

void datacallback_Master(STP_RESPONS_FROM_SLAVE_Typedef STP){
 800093c:	b084      	sub	sp, #16
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
 8000942:	f107 0c08 	add.w	ip, r7, #8
 8000946:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Master_Register_Write((int8_t *)STP.Data, REGISTER_GROUP_1 );
 800094a:	f107 030e 	add.w	r3, r7, #14
 800094e:	2101      	movs	r1, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff4d 	bl	80007f0 <Master_Register_Write>

	Response_Ready = 0;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <datacallback_Master+0x34>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	Receive_Completed = 0;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <datacallback_Master+0x38>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]


	;}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800096a:	b004      	add	sp, #16
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000261 	.word	0x20000261
 8000974:	20000260 	.word	0x20000260

08000978 <errorcllback_Master>:
void errorcllback_Master(STP_RESPONS_FROM_SLAVE_Typedef STP){
 8000978:	b084      	sub	sp, #16
 800097a:	b490      	push	{r4, r7}
 800097c:	af00      	add	r7, sp, #0
 800097e:	f107 0408 	add.w	r4, r7, #8
 8000982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Receive_Completed = 0;
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <errorcllback_Master+0x20>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc90      	pop	{r4, r7}
 8000992:	b004      	add	sp, #16
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000260 	.word	0x20000260

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 faf8 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f846 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f916 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ac:	f000 f8ea 	bl	8000b84 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80009b0:	f000 f8aa 	bl	8000b08 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80009b4:	f000 f8bc 	bl	8000b30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Init_STP_Master(&STP, &datacallback_Master, &errorcllback_Master);
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <main+0x74>)
 80009ba:	4916      	ldr	r1, [pc, #88]	; (8000a14 <main+0x78>)
 80009bc:	4816      	ldr	r0, [pc, #88]	; (8000a18 <main+0x7c>)
 80009be:	f7ff ff02 	bl	80007c6 <Init_STP_Master>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0) & (Response_Ready==0) & (Receive_Completed == 0)){
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <main+0x80>)
 80009c8:	f000 fe9a 	bl	8001700 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0x84>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <main+0x88>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10c      	bne.n	80009fe <main+0x62>

		  Master_Frame_Packer_Read_Req(&STP, REGISTER_GROUP_1, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <main+0x7c>)
 80009ea:	f7ff fda3 	bl	8000534 <Master_Frame_Packer_Read_Req>

		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)STP.Sender_Frame, MAX_DATA_LENGHT+8);
 80009ee:	2228      	movs	r2, #40	; 0x28
 80009f0:	490d      	ldr	r1, [pc, #52]	; (8000a28 <main+0x8c>)
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <main+0x90>)
 80009f4:	f001 fb9b 	bl	800212e <HAL_UART_Transmit_IT>

		  Response_Ready = 1;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <main+0x84>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]


	  }

	  if (Receive_Completed){
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <main+0x88>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0dd      	beq.n	80009c2 <main+0x26>


		  Master_Frame_Depacker(&STP, (uint8_t *)receive_buffer);
 8000a06:	490a      	ldr	r1, [pc, #40]	; (8000a30 <main+0x94>)
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <main+0x7c>)
 8000a0a:	f7ff fdfb 	bl	8000604 <Master_Frame_Depacker>
	  if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0) & (Response_Ready==0) & (Receive_Completed == 0)){
 8000a0e:	e7d8      	b.n	80009c2 <main+0x26>
 8000a10:	08000979 	.word	0x08000979
 8000a14:	0800093d 	.word	0x0800093d
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	20000261 	.word	0x20000261
 8000a24:	20000260 	.word	0x20000260
 8000a28:	200001e0 	.word	0x200001e0
 8000a2c:	20000130 	.word	0x20000130
 8000a30:	20000264 	.word	0x20000264

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fb0a 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fe52 	bl	8001764 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ac6:	f000 f921 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f8b4 	bl	8001c54 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000af2:	f000 f90b 	bl	8000d0c <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <MX_CRC_Init+0x24>)
 8000b10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b14:	f000 fbc1 	bl	800129a <HAL_CRC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b1e:	f000 f8f5 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000128 	.word	0x20000128
 8000b2c:	40023000 	.word	0x40023000

08000b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART1_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b68:	f001 fa94 	bl	8002094 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 f8cb 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000130 	.word	0x20000130
 8000b80:	40011000 	.word	0x40011000

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f001 fa6a 	bl	8002094 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f8a1 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000174 	.word	0x20000174
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2c      	ldr	r2, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2120      	movs	r1, #32
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c64:	f000 fd64 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c80:	f000 fbba 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c84:	2320      	movs	r3, #32
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c9c:	f000 fbac 	bl	80013f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * husart){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	if (husart == &huart1){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x24>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d102      	bne.n	8000cca <HAL_UART_RxCpltCallback+0x16>

		Receive_Completed=1;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_UART_RxCpltCallback+0x28>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

	}

}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000130 	.word	0x20000130
 8000cdc:	20000260 	.word	0x20000260

08000ce0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * husart){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

	if (husart == &huart1){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_UART_TxCpltCallback+0x24>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d104      	bne.n	8000cfa <HAL_UART_TxCpltCallback+0x1a>

		HAL_UART_Receive_IT(&huart1, receive_buffer, MAX_DATA_LENGHT+8);
 8000cf0:	2228      	movs	r2, #40	; 0x28
 8000cf2:	4905      	ldr	r1, [pc, #20]	; (8000d08 <HAL_UART_TxCpltCallback+0x28>)
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <HAL_UART_TxCpltCallback+0x24>)
 8000cf6:	f001 fa5f 	bl	80021b8 <HAL_UART_Receive_IT>

		}

}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000130 	.word	0x20000130
 8000d08:	20000264 	.word	0x20000264

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d56:	2007      	movs	r0, #7
 8000d58:	f000 fa5e 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_CRC_MspInit+0x3c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10d      	bne.n	8000d96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023000 	.word	0x40023000
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a36      	ldr	r2, [pc, #216]	; (8000ea4 <HAL_UART_MspInit+0xf8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d135      	bne.n	8000e3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a34      	ldr	r2, [pc, #208]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <HAL_UART_MspInit+0x100>)
 8000e24:	f000 fae8 	bl	80013f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2025      	movs	r0, #37	; 0x25
 8000e2e:	f000 f9fe 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e32:	2025      	movs	r0, #37	; 0x25
 8000e34:	f000 fa17 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e38:	e030      	b.n	8000e9c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x104>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d12b      	bne.n	8000e9c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_UART_MspInit+0xfc>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0x100>)
 8000e98:	f000 faae 	bl	80013f8 <HAL_GPIO_Init>
}
 8000e9c:	bf00      	nop
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f89a 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART1_IRQHandler+0x10>)
 8000f0e:	f001 f983 	bl	8002218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000130 	.word	0x20000130

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f002 f843 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fd13 	bl	800099c <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	080032ac 	.word	0x080032ac
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	20000290 	.word	0x20000290

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f92b 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fea6 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f943 	bl	8001282 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f90b 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	2000028c 	.word	0x2000028c

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000028c 	.word	0x2000028c

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff3e 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff31 	bl	80010dc <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00e      	b.n	80012ca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fd53 	bl	8000d68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff febe 	bl	8001060 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d008      	beq.n	8001304 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e052      	b.n	80013aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0216 	bic.w	r2, r2, #22
 8001312:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001322:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <HAL_DMA_Abort+0x62>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0208 	bic.w	r2, r2, #8
 8001342:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001354:	e013      	b.n	800137e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001356:	f7ff fe83 	bl	8001060 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b05      	cmp	r3, #5
 8001362:	d90c      	bls.n	800137e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2220      	movs	r2, #32
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e015      	b.n	80013aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e4      	bne.n	8001356 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	223f      	movs	r2, #63	; 0x3f
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d004      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e00c      	b.n	80013ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2205      	movs	r2, #5
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e159      	b.n	80016c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8148 	bne.w	80016c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d005      	beq.n	800144a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	2b02      	cmp	r3, #2
 8001448:	d130      	bne.n	80014ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 0201 	and.w	r2, r3, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d017      	beq.n	80014e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a2 	beq.w	80016c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a56      	ldr	r2, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x202>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2f4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1fe>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_GPIO_Init+0x2f8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1fa>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1f6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_GPIO_Init+0x300>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1f2>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x204>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_GPIO_Init+0x304>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x304>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_GPIO_Init+0x304>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x304>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x304>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f aea2 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e267      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d075      	beq.n	800186e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d00c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001796:	2b08      	cmp	r3, #8
 8001798:	d112      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b82      	ldr	r3, [pc, #520]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a6:	d10b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d05b      	beq.n	800186c <HAL_RCC_OscConfig+0x108>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d157      	bne.n	800186c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e242      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d106      	bne.n	80017d8 <HAL_RCC_OscConfig+0x74>
 80017ca:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xb0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6f      	ldr	r2, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xb0>
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a65      	ldr	r2, [pc, #404]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fc20 	bl	8001060 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fc1c 	bl	8001060 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e207      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xc0>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fc0c 	bl	8001060 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fc08 	bl	8001060 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1f3      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0xe8>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d063      	beq.n	8001942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x152>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1c7      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4937      	ldr	r1, [pc, #220]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	e03a      	b.n	8001942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x244>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fbc1 	bl	8001060 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fbbd 	bl	8001060 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1a8      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4925      	ldr	r1, [pc, #148]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_OscConfig+0x244>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fba0 	bl	8001060 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff fb9c 	bl	8001060 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e187      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d036      	beq.n	80019bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d016      	beq.n	8001984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_RCC_OscConfig+0x248>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff fb80 	bl	8001060 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff fb7c 	bl	8001060 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e167      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x240>)
 8001978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x200>
 8001982:	e01b      	b.n	80019bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_OscConfig+0x248>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff fb69 	bl	8001060 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	e00e      	b.n	80019b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff fb65 	bl	8001060 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d907      	bls.n	80019b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e150      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
 80019a4:	40023800 	.word	0x40023800
 80019a8:	42470000 	.word	0x42470000
 80019ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ea      	bne.n	8001992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8097 	beq.w	8001af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ce:	4b81      	ldr	r3, [pc, #516]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	4b7d      	ldr	r3, [pc, #500]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a7c      	ldr	r2, [pc, #496]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <HAL_RCC_OscConfig+0x474>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b74      	ldr	r3, [pc, #464]	; (8001bd8 <HAL_RCC_OscConfig+0x474>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a73      	ldr	r2, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x474>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb25 	bl	8001060 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff fb21 	bl	8001060 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e10c      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x474>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a63      	ldr	r2, [pc, #396]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x324>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x30c>
 8001a56:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a5e      	ldr	r2, [pc, #376]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	4b5c      	ldr	r3, [pc, #368]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a5b      	ldr	r2, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x324>
 8001a70:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fae6 	bl	8001060 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff fae2 	bl	8001060 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0cb      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0ee      	beq.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff fad0 	bl	8001060 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff facc 	bl	8001060 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0b5      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ee      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a1 	beq.w	8001c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d05c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d141      	bne.n	8001b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_RCC_OscConfig+0x478>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff faa0 	bl	8001060 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fa9c 	bl	8001060 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e087      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	019b      	lsls	r3, r3, #6
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x478>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa75 	bl	8001060 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fa71 	bl	8001060 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e05c      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x416>
 8001b98:	e054      	b.n	8001c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_RCC_OscConfig+0x478>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa5e 	bl	8001060 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff fa5a 	bl	8001060 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e045      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
 8001bc6:	e03d      	b.n	8001c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e038      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x4ec>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d028      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d121      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d11a      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d111      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0cc      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d90c      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b65      	ldr	r3, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d044      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e067      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4934      	ldr	r1, [pc, #208]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d44:	f7ff f98c 	bl	8001060 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f988 	bl	8001060 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e04f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d20c      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f8ec 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08003284 	.word	0x08003284
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e24:	b094      	sub	sp, #80	; 0x50
 8001e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e30:	2300      	movs	r3, #0
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e38:	4b79      	ldr	r3, [pc, #484]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d00d      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	f200 80e1 	bhi.w	800200c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x34>
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e52:	e0db      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e58:	e0db      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e5e:	e0d8      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e60:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e92:	4622      	mov	r2, r4
 8001e94:	462b      	mov	r3, r5
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	0159      	lsls	r1, r3, #5
 8001ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea4:	0150      	lsls	r0, r2, #5
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4621      	mov	r1, r4
 8001eac:	1a51      	subs	r1, r2, r1
 8001eae:	6139      	str	r1, [r7, #16]
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ec4:	4659      	mov	r1, fp
 8001ec6:	018b      	lsls	r3, r1, #6
 8001ec8:	4651      	mov	r1, sl
 8001eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ece:	4651      	mov	r1, sl
 8001ed0:	018a      	lsls	r2, r1, #6
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ed8:	4659      	mov	r1, fp
 8001eda:	eb63 0901 	sbc.w	r9, r3, r1
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	eb18 0303 	adds.w	r3, r8, r3
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	462b      	mov	r3, r5
 8001f00:	eb49 0303 	adc.w	r3, r9, r3
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f12:	4629      	mov	r1, r5
 8001f14:	024b      	lsls	r3, r1, #9
 8001f16:	4621      	mov	r1, r4
 8001f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	024a      	lsls	r2, r1, #9
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f26:	2200      	movs	r2, #0
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f30:	f7fe f952 	bl	80001d8 <__aeabi_uldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f3c:	e058      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	4611      	mov	r1, r2
 8001f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
 8001f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	0159      	lsls	r1, r3, #5
 8001f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6a:	0150      	lsls	r0, r2, #5
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4641      	mov	r1, r8
 8001f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f76:	4649      	mov	r1, r9
 8001f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f90:	ebb2 040a 	subs.w	r4, r2, sl
 8001f94:	eb63 050b 	sbc.w	r5, r3, fp
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	00eb      	lsls	r3, r5, #3
 8001fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa6:	00e2      	lsls	r2, r4, #3
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	4643      	mov	r3, r8
 8001fae:	18e3      	adds	r3, r4, r3
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	eb45 0303 	adc.w	r3, r5, r3
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	028b      	lsls	r3, r1, #10
 8001fca:	4621      	mov	r1, r4
 8001fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	028a      	lsls	r2, r1, #10
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	61fa      	str	r2, [r7, #28]
 8001fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fe4:	f7fe f8f8 	bl	80001d8 <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4613      	mov	r3, r2
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetSysClockFreq+0x204>)
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002014:	4618      	mov	r0, r3
 8002016:	3750      	adds	r7, #80	; 0x50
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400
 8002028:	007a1200 	.word	0x007a1200

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_RCC_GetHCLKFreq+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002048:	f7ff fff0 	bl	800202c <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	08003294 	.word	0x08003294

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002070:	f7ff ffdc 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0b5b      	lsrs	r3, r3, #13
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	08003294 	.word	0x08003294

08002094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e03f      	b.n	8002126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fe76 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fd19 	bl	8002b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d130      	bne.n	80021aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_UART_Transmit_IT+0x26>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e029      	b.n	80021ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_UART_Transmit_IT+0x38>
 8002162:	2302      	movs	r3, #2
 8002164:	e022      	b.n	80021ac <HAL_UART_Transmit_IT+0x7e>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2221      	movs	r2, #33	; 0x21
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d11d      	bne.n	800220e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_UART_Receive_IT+0x26>
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e016      	b.n	8002210 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Receive_IT+0x38>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e00f      	b.n	8002210 <HAL_UART_Receive_IT+0x58>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	461a      	mov	r2, r3
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 faab 	bl	8002760 <UART_Start_Receive_IT>
 800220a:	4603      	mov	r3, r0
 800220c:	e000      	b.n	8002210 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0ba      	sub	sp, #232	; 0xe8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10f      	bne.n	800227e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800225e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_UART_IRQHandler+0x66>
 800226a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fb8f 	bl	800299a <UART_Receive_IT>
      return;
 800227c:	e256      	b.n	800272c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800227e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80de 	beq.w	8002444 <HAL_UART_IRQHandler+0x22c>
 8002288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80d1 	beq.w	8002444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_UART_IRQHandler+0xae>
 80022ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_UART_IRQHandler+0xd2>
 80022d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_UART_IRQHandler+0xf6>
 80022f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0204 	orr.w	r2, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d011      	beq.n	800233e <HAL_UART_IRQHandler+0x126>
 800231a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0208 	orr.w	r2, r3, #8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 81ed 	beq.w	8002722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_UART_IRQHandler+0x14e>
 8002354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb1a 	bl	800299a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_UART_IRQHandler+0x17a>
 800238a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d04f      	beq.n	8002432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa22 	bl	80027dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d141      	bne.n	800242a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3314      	adds	r3, #20
 80023ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3314      	adds	r3, #20
 80023ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023e2:	e841 2300 	strex	r3, r2, [r1]
 80023e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1d9      	bne.n	80023a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a7d      	ldr	r2, [pc, #500]	; (80025f4 <HAL_UART_IRQHandler+0x3dc>)
 8002400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ffd3 	bl	80013b2 <HAL_DMA_Abort_IT>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241c:	4610      	mov	r0, r2
 800241e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002420:	e00e      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f986 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	e00a      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f982 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e006      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f97e 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800243e:	e170      	b.n	8002722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	bf00      	nop
    return;
 8002442:	e16e      	b.n	8002722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 814a 	bne.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8143 	beq.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800245c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 813c 	beq.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	f040 80b4 	bne.w	80025f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800249c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8140 	beq.w	8002726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ae:	429a      	cmp	r2, r3
 80024b0:	f080 8139 	bcs.w	8002726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	f000 8088 	beq.w	80025da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1d9      	bne.n	80024ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800253a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800253e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800254c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800257c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a2:	e853 3f00 	ldrex	r3, [r3]
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025aa:	f023 0310 	bic.w	r3, r3, #16
 80025ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e3      	bne.n	8002598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fe7c 	bl	80012d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8ac 	bl	8002748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025f0:	e099      	b.n	8002726 <HAL_UART_IRQHandler+0x50e>
 80025f2:	bf00      	nop
 80025f4:	080028a3 	.word	0x080028a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002600:	b29b      	uxth	r3, r3
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 808b 	beq.w	800272a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8086 	beq.w	800272a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002642:	647a      	str	r2, [r7, #68]	; 0x44
 8002644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e3      	bne.n	800261e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3314      	adds	r3, #20
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	623b      	str	r3, [r7, #32]
   return(result);
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800267a:	633a      	str	r2, [r7, #48]	; 0x30
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e3      	bne.n	8002656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0310 	bic.w	r3, r3, #16
 80026b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026c0:	61fa      	str	r2, [r7, #28]
 80026c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	e841 2300 	strex	r3, r2, [r1]
 80026cc:	617b      	str	r3, [r7, #20]
   return(result);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e3      	bne.n	800269c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f834 	bl	8002748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e0:	e023      	b.n	800272a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_UART_IRQHandler+0x4ea>
 80026ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8e5 	bl	80028ca <UART_Transmit_IT>
    return;
 8002700:	e014      	b.n	800272c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <HAL_UART_IRQHandler+0x514>
 800270e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f925 	bl	800296a <UART_EndTransmit_IT>
    return;
 8002720:	e004      	b.n	800272c <HAL_UART_IRQHandler+0x514>
    return;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <HAL_UART_IRQHandler+0x514>
      return;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_UART_IRQHandler+0x514>
      return;
 800272a:	bf00      	nop
  }
}
 800272c:	37e8      	adds	r7, #232	; 0xe8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop

08002734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2222      	movs	r2, #34	; 0x22
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b095      	sub	sp, #84	; 0x54
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002804:	643a      	str	r2, [r7, #64]	; 0x40
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800280a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e5      	bne.n	80027e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	61fb      	str	r3, [r7, #28]
   return(result);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	2b01      	cmp	r3, #1
 8002852:	d119      	bne.n	8002888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	60bb      	str	r3, [r7, #8]
   return(result);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002874:	61ba      	str	r2, [r7, #24]
 8002876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6979      	ldr	r1, [r7, #20]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	613b      	str	r3, [r7, #16]
   return(result);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002896:	bf00      	nop
 8002898:	3754      	adds	r7, #84	; 0x54
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff ff39 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b21      	cmp	r3, #33	; 0x21
 80028dc:	d13e      	bne.n	800295c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d114      	bne.n	8002912 <UART_Transmit_IT+0x48>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d110      	bne.n	8002912 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	621a      	str	r2, [r3, #32]
 8002910:	e008      	b.n	8002924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6211      	str	r1, [r2, #32]
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29b      	uxth	r3, r3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4619      	mov	r1, r3
 8002932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f9a8 	bl	8000ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08c      	sub	sp, #48	; 0x30
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b22      	cmp	r3, #34	; 0x22
 80029ac:	f040 80ab 	bne.w	8002b06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d117      	bne.n	80029ea <UART_Receive_IT+0x50>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d113      	bne.n	80029ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	1c9a      	adds	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
 80029e8:	e026      	b.n	8002a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fc:	d007      	beq.n	8002a0e <UART_Receive_IT+0x74>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <UART_Receive_IT+0x82>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e008      	b.n	8002a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d15a      	bne.n	8002b02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0220 	bic.w	r2, r2, #32
 8002a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d135      	bne.n	8002af8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab2:	623a      	str	r2, [r7, #32]
 8002ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e5      	bne.n	8002a92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10a      	bne.n	8002aea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe29 	bl	8002748 <HAL_UARTEx_RxEventCallback>
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fe f8db 	bl	8000cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e002      	b.n	8002b08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3730      	adds	r7, #48	; 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b0c0      	sub	sp, #256	; 0x100
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	ea40 0301 	orr.w	r3, r0, r1
 8002b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b68:	f021 010c 	bic.w	r1, r1, #12
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b76:	430b      	orrs	r3, r1
 8002b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	ea40 0301 	orr.w	r3, r0, r1
 8002b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <UART_SetConfig+0x2cc>)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0xa0>
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b8d      	ldr	r3, [pc, #564]	; (8002de0 <UART_SetConfig+0x2d0>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d104      	bne.n	8002bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7ff fa5c 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8002bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb8:	e003      	b.n	8002bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff fa43 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bcc:	f040 810c 	bne.w	8002de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bea:	415b      	adcs	r3, r3
 8002bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	eb12 0801 	adds.w	r8, r2, r1
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb43 0901 	adc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c20:	462b      	mov	r3, r5
 8002c22:	eb49 0303 	adc.w	r3, r9, r3
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c3e:	460b      	mov	r3, r1
 8002c40:	18db      	adds	r3, r3, r3
 8002c42:	653b      	str	r3, [r7, #80]	; 0x50
 8002c44:	4613      	mov	r3, r2
 8002c46:	eb42 0303 	adc.w	r3, r2, r3
 8002c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c54:	f7fd fac0 	bl	80001d8 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <UART_SetConfig+0x2d4>)
 8002c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	011c      	lsls	r4, r3, #4
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c80:	415b      	adcs	r3, r3
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c88:	4641      	mov	r1, r8
 8002c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c8e:	4649      	mov	r1, r9
 8002c90:	eb43 0b01 	adc.w	fp, r3, r1
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca8:	4692      	mov	sl, r2
 8002caa:	469b      	mov	fp, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	eb1a 0303 	adds.w	r3, sl, r3
 8002cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cea:	f7fd fa75 	bl	80001d8 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <UART_SetConfig+0x2d4>)
 8002cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2264      	movs	r2, #100	; 0x64
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <UART_SetConfig+0x2d4>)
 8002d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d18:	441c      	add	r4, r3
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d34:	415b      	adcs	r3, r3
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	1851      	adds	r1, r2, r1
 8002d40:	6339      	str	r1, [r7, #48]	; 0x30
 8002d42:	4649      	mov	r1, r9
 8002d44:	414b      	adcs	r3, r1
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d54:	4659      	mov	r1, fp
 8002d56:	00cb      	lsls	r3, r1, #3
 8002d58:	4651      	mov	r1, sl
 8002d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5e:	4651      	mov	r1, sl
 8002d60:	00ca      	lsls	r2, r1, #3
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	4642      	mov	r2, r8
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	464b      	mov	r3, r9
 8002d72:	460a      	mov	r2, r1
 8002d74:	eb42 0303 	adc.w	r3, r2, r3
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002da6:	f7fd fa17 	bl	80001d8 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <UART_SetConfig+0x2d4>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2164      	movs	r1, #100	; 0x64
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3332      	adds	r3, #50	; 0x32
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <UART_SetConfig+0x2d4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4422      	add	r2, r4
 8002dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd8:	e105      	b.n	8002fe6 <UART_SetConfig+0x4d6>
 8002dda:	bf00      	nop
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002df2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	6239      	str	r1, [r7, #32]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	1854      	adds	r4, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0501 	adc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e30:	464b      	mov	r3, r9
 8002e32:	eb45 0303 	adc.w	r3, r5, r3
 8002e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e56:	4629      	mov	r1, r5
 8002e58:	008b      	lsls	r3, r1, #2
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e60:	4621      	mov	r1, r4
 8002e62:	008a      	lsls	r2, r1, #2
 8002e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e68:	f7fd f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <UART_SetConfig+0x4e4>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011c      	lsls	r4, r3, #4
 8002e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	61b9      	str	r1, [r7, #24]
 8002e94:	415b      	adcs	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	1851      	adds	r1, r2, r1
 8002ea0:	6139      	str	r1, [r7, #16]
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	00cb      	lsls	r3, r1, #3
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	00ca      	lsls	r2, r1, #3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ee6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	008b      	lsls	r3, r1, #2
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efe:	4641      	mov	r1, r8
 8002f00:	008a      	lsls	r2, r1, #2
 8002f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f06:	f7fd f967 	bl	80001d8 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <UART_SetConfig+0x4e4>)
 8002f10:	fba3 1302 	umull	r1, r3, r3, r2
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	2164      	movs	r1, #100	; 0x64
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	3332      	adds	r3, #50	; 0x32
 8002f22:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <UART_SetConfig+0x4e4>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2e:	441c      	add	r4, r3
 8002f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f34:	2200      	movs	r2, #0
 8002f36:	673b      	str	r3, [r7, #112]	; 0x70
 8002f38:	677a      	str	r2, [r7, #116]	; 0x74
 8002f3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f3e:	4642      	mov	r2, r8
 8002f40:	464b      	mov	r3, r9
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	415b      	adcs	r3, r3
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f4e:	4641      	mov	r1, r8
 8002f50:	1851      	adds	r1, r2, r1
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	4649      	mov	r1, r9
 8002f56:	414b      	adcs	r3, r1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f66:	4659      	mov	r1, fp
 8002f68:	00cb      	lsls	r3, r1, #3
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f70:	4651      	mov	r1, sl
 8002f72:	00ca      	lsls	r2, r1, #3
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	189b      	adds	r3, r3, r2
 8002f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f80:	464b      	mov	r3, r9
 8002f82:	460a      	mov	r2, r1
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	663b      	str	r3, [r7, #96]	; 0x60
 8002f94:	667a      	str	r2, [r7, #100]	; 0x64
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	008b      	lsls	r3, r1, #2
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fac:	4641      	mov	r1, r8
 8002fae:	008a      	lsls	r2, r1, #2
 8002fb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fb4:	f7fd f910 	bl	80001d8 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <UART_SetConfig+0x4e4>)
 8002fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2164      	movs	r1, #100	; 0x64
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	; 0x32
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <UART_SetConfig+0x4e4>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4422      	add	r2, r4
 8002fe4:	609a      	str	r2, [r3, #8]
}
 8002fe6:	bf00      	nop
 8002fe8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	; (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	; (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	; (800303c <__libc_init_array+0x44>)
 800300c:	f000 f82e 	bl	800306c <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	080032a4 	.word	0x080032a4
 8003034:	080032a4 	.word	0x080032a4
 8003038:	080032a4 	.word	0x080032a4
 800303c:	080032a8 	.word	0x080032a8

08003040 <memcpy>:
 8003040:	440a      	add	r2, r1
 8003042:	4291      	cmp	r1, r2
 8003044:	f100 33ff 	add.w	r3, r0, #4294967295
 8003048:	d100      	bne.n	800304c <memcpy+0xc>
 800304a:	4770      	bx	lr
 800304c:	b510      	push	{r4, lr}
 800304e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003056:	4291      	cmp	r1, r2
 8003058:	d1f9      	bne.n	800304e <memcpy+0xe>
 800305a:	bd10      	pop	{r4, pc}

0800305c <memset>:
 800305c:	4402      	add	r2, r0
 800305e:	4603      	mov	r3, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
